{"project": "numpy", "project_url": "https://www.numpy.org/", "show_commit_url": "https://github.com/numpy/numpy/commit/", "hash_length": 8, "revision_to_hash": {"42": "e8c50dc6676e380e814c77927445ab3594382bc4", "740": "d8e22e7e6479aa38b62c53f14ebaf98328131061", "760": "3cb02b56a10d3fe8cf6a7ae7b36e9a2f52661c2e", "871": "957cf7970b0d2b2c600ae6459fb45db8ef498de1", "1215": "ac4db180f8cab1d302e699426a7257ec6b0df426", "1435": "5ac24f59ed0053f58781d198e64e6ebe6dbe1d69", "1441": "513d80a5a37a3f6e7bb31e4fc4437fd229d8906c", "1591": "2efca402e8c6aae80ec131fa350c04e5463c8692", "1767": "cbec6098bf702e19d2923d15d420e9410d94bf5c", "1916": "c79bcec14a12a38a1563d1189324257e5df71397", "2054": "3a01f1da914f586ade80cad147d6ea6781d08265", "2167": "d99b776ffb2a6d5718bfdb7f17b46c06a3dc84fc", "2472": "9da998fd005e4d4774cd7f0152490a5bf8c35c99", "2788": "6dd69530d58ba65f4a37167ddec7c9cf19e44c18", "2916": "87596eef24789199f98b502559f110cecdd05025", "2949": "cc6bed52164cf955d56081835e1790622220ca62", "2986": "64be3e2a89c72a8b23ad11b3719bd66725658c61", "3015": "c90202ce60184a803b311754b26f1386bcf1757f", "3096": "56ac5f7711cc399db40738a625d2f33f24fb6166", "3192": "f25e1581827ee3ec98518fe3ad7b855904202383", "3259": "c9d632d3d112854a7a865762097dedc6535a41ed", "3290": "3301a33d6b8daa647ff744b1e6302705de5d67ba", "3366": "1a6b656657baa12f6e3ab41ebb731e2a162f262c", "3543": "9d647f6a0b2f1583ac4e1f9542523ac9db565d45", "3724": "2be238df5e6682083c448264e52d2d8df0055e9c", "3846": "8410a4199e0efea7f56ed474c9754cf4895695b2", "3983": "cd8db12913c9bd7323b77a03a8fa11667634b1a9", "4589": "d83d143053c28864fd9762b8892cb78f7b58f927", "4635": "e43987ae07a1e3ba4b1fb63273069028e4e3d2ce", "4881": "b38e5c2a3b7841aad8df6af35c8e49400ad5b5d9", "4904": "54bb7abd3adc59578c559acb2d2938ae42b401a1", "4948": "6727624e1c42177c0a60a1baf9e46c41ccbdcf20", "4998": "ff040d986da26c846c3b865afa99e0f6ced82b7a", "5005": "68072bf7d9c57895ebe51cfca2aaac52506faec2", "5090": "c29e590ee6bdde6168216642285828fa140c0205", "5144": "ad3f9e63e0598351c51bed7c4686300527f2488d", "5203": "f5596a9d809fbba266aad1702fd048f1de32d1f0", "5277": "d4f826b4bafeea0e4a16b2cb3954b2155483e91a", "5964": "480b20bb72547d35f91a79c2c1bc6166316a56d3", "6082": "efc49bb76f9d9eacb3825d6f42ba283e0c0985c2", "6105": "2f9063f598515a2708decd55a13cd5672851047f", "6111": "c3e0147d49286c0cb1b65a95d42f5eb4a4779129", "7077": "94a1fa8166f715024c3ace71ef25b8498d0c8661", "7287": "76b40e882632f60ecc600770c8eee8d4594754b8", "7290": "4b42c8f6b81d87f35ed8dcf4430224992cf2d296", "7596": "c7ba5001b484eb7565f3a4b1fecadb81f74884bd", "7601": "2edbff0a555835435e19e22fd3e80a522b2beb70", "7605": "05cc071eb092c3953d26dfd53831f9828596cf6c", "7607": "351726ab14cf919aab55fb91608f6448bb063609", "7838": "1ddfa53167695671adbd72de056ae9d30f5c20f7", "7900": "9673b8f82442d84bcdc22690d44ab4d30dabcc81", "7919": "d68b2318454e777a3ae41df019bbed86fdf00f4a", "7924": "c069eee07f2a976b3c2660670dc7bca6438ee94f", "8049": "97cb28e72124ff621958127fde68e1327ac2e324", "8077": "33047912898fb4e15045e8940b0988fb1e474de2", "8094": "de969d7f94ddfc1854565518d5da61fbfc8bf4a3", "8515": "cd6c14be42c149730349ba551d8083f3c08b9c73", "8649": "9b2031f636545bf8e91e59770eb284f56d2a04fd", "8733": "65bcb41240e260e5f8c85e4e30a8f6bc68c72567", "8748": "ceba67b52a8c9ad7ce36553add4506d84a70ad30", "8759": "1e85f6fd045dd75a0697bed5bb619fb792632da2", "8765": "039ceba764704d0b4182cd2ecd6b88242f792804", "8847": "b11e3af9487cf3342bbad742231c312a02398f91", "8956": "9b46e7b7c47cb676999014cbb93709a12e7d63e3", "9026": "41fa279b579c68ac5f5991800034ba94c7ca8b50", "9071": "68538b74483009c2c2d1644ef00397014f95a696", "9830": "09bb26867d73173d74b4f9d4d481064e6044fa71", "9876": "ca07bce202ae26b6f0a73870eb2ef0b88e0210c5", "9952": "651ef74c4ebe7d24e727fd444b1985117ef16fae", "10100": "50366a2ac0d6158e4434ec5e5b4a9a521610628b", "10201": "f2175177b060d01ec5bf6f7e038d71563995fb42", "10586": "1cd02e093d4a27ff526dfffa2152a67e93817fbd", "10683": "e0e3a8732859639917be89f525bd359cf8d608d7", "10713": "a43307cdcc06a358097a9e88de388409a5b99735", "10714": "0c5a166183764aeb3fd1fba799caea489f20682f", "10894": "21bda0e23c6d2e02776e00268bcfee71740f3580", "10952": "697316a867a32e9f72778a29226c9febbf867ee8", "11907": "1bcc80257c94427436eea2e50c70c78179ed1fb9", "11963": "4777d09b39ac0a331e1ac9578e3a754c0e084574", "12166": "260e8f26f8f808e473f1c839411e28bd33edae4e", "12280": "0ccaab00ba14eebeb6620e6c64723189e2bd0a11", "12411": "a60b3901cd635d28bef8328e83bafd35ce631e08", "12438": "3bf8706cefd28d33fb3ea1915d8a11f54ee7cfef", "12590": "4322701029c8bf1d87203cafe781a0128dd86a62", "13048": "23f8dcf86cf692fcc9dce48350d5d86c0bc63ada", "13148": "48c77a64aba109de54d90f103203f1990325c37c", "13266": "62a7575fd82ddf028517780c01fecf7e0cca27aa", "13574": "96b4349da97fd49fb04b678ce16897101677b09f", "13746": "faa6fa074c966cf30b68b2244bb55691edb1bba1", "13794": "c7ad14f5f3069e93a674e0ddf260d7da6c71a5a7", "13799": "4563730a2d036307f1b67b2856d749aabdd8d546", "13857": "36d947fe379e7534624328f7382e4e1175823170", "13918": "07601a64cdfeb1c0247bde1294ad6380413cab66", "14134": "c88fd91482782f35a78d6144331471085b8695b0", "14153": "d44b9c61499f8bc5a9fc94286cd52f05e15e003f", "14443": "c04513ca87f3471c407d00fa3be9d456cc34a1a3", "14555": "762c6f15bf57506e21239a4dd68192e4da6014f7", "15167": "b9640613ddeaa5993916718ebec8c71d4001d489", "15308": "edb902cdc6573553afcf11047ecdfb447e444322", "15380": "2c24d62c775dac583235606a396b4966a3f1144c", "15429": "183fdb290cd46b1f01303d24ac0c9fc3ff24fe05", "15442": "e905cad9646ad65316458bbc7f5c83a9d5ec8728", "15495": "f769c64026f5ff993ec1e28cbd9f39b8da75347d", "15747": "90d1f8fb7e43a1c6664d6a1a05d01d9fafbfc7ea", "15860": "c16af049301ed0a88c57e403854f90725a4a8a7d", "15898": "5667fbafb5d84e3a412a07aac72c769baa590579", "16072": "ea8aa221f98d0bbd24884e9d6e31fbb613f478f1", "16076": "e46c2d78a27f25e66624a818276be57ef9458e60", "16292": "2d1d5c4535bd6df34bed4bf304e253667abf8096", "16308": "66e91fdef4755075689f63e55732d512deb955f2", "16415": "fe0231d5e5256696c9aa923e62e0ca1d02223b40", "16528": "f2756423f00b03063c9424f014ee814ae2ac2884", "16649": "199dc1a43a37adbc0d92f58574494ed80a1fed25", "16687": "4092a9e160cc247a4a45724579a0c829733688ca", "16880": "abcb51151634c09b0db4eb462939f910555b7971", "16984": "ccc6b8d8fcf92cc6dc19f7e14d91fc6c127114a6", "17222": "fe3e46d2876af2546a5fcc752ead8aa736ea2658", "17275": "bb6e3dc30016b89bf154f7d7fce4248e760bd40f", "17440": "67551112fa684d1686ed173eb9724a4b8a7a86fa", "17557": "bfc9a059c48c57c4ef20bebe88d6f6ce363d1464", "17581": "4cf6f18cff3a4080c6a53e5c2bd63e6b9bf7e5db", "17614": "75d28bb59899eedcb83bd8e38be708a9cc5958e7", "17655": "561f1accf861ad8606ea2dd723d2be2b09a2dffa", "17960": "61e667e4a6b6e55356dc97d2f66eb7afb4a69b55", "17996": "11f77c8b19dae99981910695a806cbf4def67e24", "18413": "d6ab6da640156e4a75a78d5d6e7f25a098b5f52b", "18465": "59aec750c677b348dce102bc6fa1e6f9395362b8", "18526": "e94ed84010c60961f82860d146681d3fd607de4e", "18677": "1462df1c20eae44d28e6b665b5d194788f57efc5", "19120": "cde88ddf408f41ca2669adc4401fb69682726a55", "19139": "31465473c491829d636c9104c390062cba005681", "19601": "d64539a97a7d21857b71e181f848a17d15a48ef7", "19763": "6914bb41f0fb3c1ba500bae4e7d671da9536786f", "20039": "7dcee7a469ad1bbfef1cd8980dc18bf5869c5391", "20123": "6a58e25703cbecb6786faa09a04ae2ec8221348b", "20432": "73299826729be58cec179b52c656adfcaefada93", "20707": "83419d6462461110035fa27e322efed557c739ac", "20774": "d3348c1123d3862a42d50a7fee14e50b268944a4", "20873": "7850096157436c650803e8ea6d98ec0d42d96102", "21022": "ccc68b80305ff5b363d10f6e905fb4e5276a8adb", "21084": "ccfbcc1cd9a4035a467f2e982a565ab27de25b6b", "21297": "5adb81051086a45fe3b59ba506b567340ec9bd5e", "21551": "b261d8e562d162397fb0458cf8f281e0bb8e4ced", "21560": "8706d48bd9918fca93ee50cb8bdc04d8ed16cbbd", "21844": "f82c2b62d18b381baefc30f8e8d7788d08a0bd16", "21942": "de28edd8f514b82c0524b55f622078d47f479322", "22165": "7d92b0689fd9fe7132f290a602ea44bc37754a50"}, "revision_to_date": {"42": 1010250430000, "740": 1080942012000, "760": 1081968728000, "871": 1097349846000, "1215": 1129103142000, "1435": 1131769706000, "1441": 1131851529000, "1591": 1134458827000, "1767": 1136491532000, "1916": 1137917799000, "2054": 1140130368000, "2167": 1142327266000, "2472": 1148854131000, "2788": 1153471716000, "2916": 1155540872000, "2949": 1156194384000, "2986": 1156794775000, "3015": 1157428144000, "3096": 1158779673000, "3192": 1160425354000, "3259": 1161233179000, "3290": 1161767157000, "3366": 1165042730000, "3543": 1175637762000, "3724": 1180631535000, "3846": 1187462962000, "3983": 1194559578000, "4589": 1211082979000, "4635": 1211787689000, "4881": 1216657071000, "4904": 1216831681000, "4948": 1217537675000, "4998": 1218608267000, "5005": 1218666290000, "5090": 1220400184000, "5144": 1221033369000, "5203": 1222317976000, "5277": 1225192990000, "5964": 1237357434000, "6082": 1238247937000, "6105": 1238767315000, "6111": 1238907901000, "7077": 1259629925000, "7287": 1261409435000, "7290": 1261963508000, "7596": 1271580439000, "7601": 1271583582000, "7605": 1271594530000, "7607": 1271932516000, "7838": 1280662582000, "7900": 1282045592000, "7919": 1282740471000, "7924": 1283257801000, "8049": 1287297181000, "8077": 1289224772000, "8094": 1290078864000, "8515": 1300868697000, "8649": 1301858926000, "8733": 1303929670000, "8748": 1304439777000, "8759": 1304793730000, "8765": 1305358911000, "8847": 1307957944000, "8956": 1309549599000, "9026": 1310325134000, "9071": 1311186558000, "9830": 1336165331000, "9876": 1337434901000, "9952": 1340207109000, "10100": 1345509889000, "10201": 1348118703000, "10586": 1356729952000, "10683": 1358806942000, "10713": 1360182042000, "10714": 1360443096000, "10894": 1364150879000, "10952": 1365311159000, "11907": 1378050610000, "11963": 1378665363000, "12166": 1380482446000, "12280": 1381686735000, "12411": 1383002462000, "12438": 1383485948000, "12590": 1388487707000, "13048": 1393769459000, "13148": 1394750047000, "13266": 1395783838000, "13574": 1402237862000, "13746": 1406747979000, "13794": 1407263229000, "13799": 1407580724000, "13857": 1409154091000, "13918": 1410080234000, "14134": 1414340499000, "14153": 1414930922000, "14443": 1422808828000, "14555": 1425216987000, "15167": 1439313035000, "15308": 1442856145000, "15380": 1443496521000, "15429": 1444097817000, "15442": 1444246477000, "15495": 1444660531000, "15747": 1447359318000, "15860": 1449535709000, "15898": 1450120843000, "16072": 1452119720000, "16076": 1452133260000, "16292": 1453770183000, "16308": 1454010965000, "16415": 1455061855000, "16528": 1456185152000, "16649": 1458424675000, "16687": 1459109632000, "16880": 1464312772000, "16984": 1466868751000, "17222": 1473642948000, "17275": 1475538767000, "17440": 1479339043000, "17557": 1482099063000, "17581": 1482185626000, "17614": 1483298534000, "17655": 1484509772000, "17960": 1488844343000, "17996": 1489850965000, "18413": 1494454540000, "18465": 1495130479000, "18526": 1496849195000, "18677": 1499381877000, "19120": 1506523104000, "19139": 1506715810000, "19601": 1513126148000, "19763": 1515268836000, "20039": 1519161772000, "20123": 1520870266000, "20432": 1524857809000, "20707": 1528296187000, "20774": 1528825313000, "20873": 1529537186000, "21022": 1531154140000, "21084": 1532350593000, "21297": 1534866571000, "21551": 1537663658000, "21560": 1537712698000, "21844": 1540157357000, "21942": 1541288187000, "22165": 1544730063000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) CPU @ 2.00GHz"], "machine": ["asv-benchmark-numpy"], "os": ["Linux 4.15.0-1025-gcp"], "python": ["3.6"], "ram": ["371481332"], "six": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU @ 2.00GHz", "machine": "asv-benchmark-numpy", "os": "Linux 4.15.0-1025-gcp", "python": "3.6", "ram": "371481332", "six": "", "branch": "master"}], "benchmarks": {"bench_app.LaplaceInplace.time_it": {"code": "class LaplaceInplace:\n    def time_it(self, update):\n        self.run()\n\n    def setup(self, update):\n        N = 150\n        Niter = 1000\n        dx = 0.1\n        dy = 0.1\n        dx2 = (dx * dx)\n        dy2 = (dy * dy)\n    \n        def num_update(u, dx2, dy2):\n            u[1:(-1), 1:(-1)] = ((((u[2:, 1:(-1)] + u[:(-2), 1:(-1)]) * dy2) +\n                                  ((u[1:(-1), 2:] + u[1:(-1), :(-2)]) * dx2))\n                                 / (2 * (dx2 + dy2)))\n    \n        def num_inplace(u, dx2, dy2):\n            tmp = u[:(-2), 1:(-1)].copy()\n            np.add(tmp, u[2:, 1:(-1)], out=tmp)\n            np.multiply(tmp, dy2, out=tmp)\n            tmp2 = u[1:(-1), 2:].copy()\n            np.add(tmp2, u[1:(-1), :(-2)], out=tmp2)\n            np.multiply(tmp2, dx2, out=tmp2)\n            np.add(tmp, tmp2, out=tmp)\n            np.multiply(tmp, (1.0 / (2.0 * (dx2 + dy2))),\n                        out=u[1:(-1), 1:(-1)])\n    \n        def laplace(N, Niter=100, func=num_update, args=()):\n            u = np.zeros([N, N], order='C')\n            u[0] = 1\n            for i in range(Niter):\n                func(u, *args)\n            return u\n    \n        func = {'inplace': num_inplace, 'normal': num_update}[update]\n    \n        def run():\n            laplace(N, Niter, func, args=(dx2, dy2))\n    \n        self.run = run", "min_run_count": 2, "name": "bench_app.LaplaceInplace.time_it", "number": 0, "param_names": ["update"], "params": [["'inplace'", "'normal'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e912d48a31445b41d3721a0504b60aa72ddb03e4689b8386bdca5446901fa5ba", "warmup_time": -1}, "bench_app.MaxesOfDots.time_it": {"code": "class MaxesOfDots:\n    def time_it(self):\n        self.maxes_of_dots(self.arrays)\n\n    def setup(self):\n        np.random.seed(1)\n        nsubj = 5\n        nfeat = 100\n        ntime = 200\n    \n        self.arrays = [np.random.normal(size=(ntime, nfeat))\n                       for i in xrange(nsubj)]", "min_run_count": 2, "name": "bench_app.MaxesOfDots.time_it", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5125f55ec647075ee73e4c18418eda050278d6edde30f4e0a1fb26944e80822e", "warmup_time": -1}, "bench_core.Core.time_arange_100": {"code": "class Core:\n    def time_arange_100(self):\n        np.arange(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_arange_100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6bfa19f959cbb6fc9a1ef29673b0d502712397f2be09878ffc11c508ed38365d", "warmup_time": -1}, "bench_core.Core.time_array_1": {"code": "class Core:\n    def time_array_1(self):\n        np.array(1)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_array_1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e673ac17796e0745b665c94779594ca8d1db1a8e91645a66ee2686bd0ec081c", "warmup_time": -1}, "bench_core.Core.time_array_empty": {"code": "class Core:\n    def time_array_empty(self):\n        np.array([])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_array_empty", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "005d1f902cea40842c3597de3f730ec081992f6cd7e2823f1cc8b2eec5b9a244", "warmup_time": -1}, "bench_core.Core.time_array_l": {"code": "class Core:\n    def time_array_l(self):\n        np.array(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_array_l", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1115ff5ee4f84703dceab00fb49b393c1b2ff2690bc681981a0fcd29f525739a", "warmup_time": -1}, "bench_core.Core.time_array_l1": {"code": "class Core:\n    def time_array_l1(self):\n        np.array([1])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_array_l1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "700a3f6e8924afc974d3400f8a13fccd4cec29f8f0633fff1381330fd94e6f67", "warmup_time": -1}, "bench_core.Core.time_array_l100": {"code": "class Core:\n    def time_array_l100(self):\n        np.array(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_array_l100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5609312e5be2a417392d62375ba49012af757ae23a65e4905a72addcfdffc2b9", "warmup_time": -1}, "bench_core.Core.time_diag_l100": {"code": "class Core:\n    def time_diag_l100(self):\n        np.diag(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_diag_l100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0e204c2183302f889f591d8462bd98395e118e2e1ceeea4b7e1205a0c518712a", "warmup_time": -1}, "bench_core.Core.time_diagflat_l100": {"code": "class Core:\n    def time_diagflat_l100(self):\n        np.diagflat(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_diagflat_l100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e1b748daa7cc05737ac78cecd0f652adb0fb7d7ad930ece883ba829dfcefa56c", "warmup_time": -1}, "bench_core.Core.time_diagflat_l50_l50": {"code": "class Core:\n    def time_diagflat_l50_l50(self):\n        np.diagflat([self.l50, self.l50])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_diagflat_l50_l50", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7251a995cd3995e462ab9de311be9c2a3f21b2652434ec9e5f3b6efe19c70cb5", "warmup_time": -1}, "bench_core.Core.time_dstack_l": {"code": "class Core:\n    def time_dstack_l(self):\n        np.dstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_dstack_l", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6cde4be3d53e715f7f0637daa91e3c3009f9e34779f5f1e330224058cf89a26f", "warmup_time": -1}, "bench_core.Core.time_empty_100": {"code": "class Core:\n    def time_empty_100(self):\n        np.empty(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_empty_100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e294e06f46cfba2ad53f3c86ecdc8c1db6a62c982256e314dab1d9043ee89c4b", "warmup_time": -1}, "bench_core.Core.time_eye_100": {"code": "class Core:\n    def time_eye_100(self):\n        np.eye(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_eye_100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "263c28a45a99544377209c4e14ced908f3962f56d1236c90d0ae524685dbc532", "warmup_time": -1}, "bench_core.Core.time_eye_3000": {"code": "class Core:\n    def time_eye_3000(self):\n        np.eye(3000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_eye_3000", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a02bb0c4c30fa7988e70278a5cf9e2b082990ef8031880efeca0735a0d5a1ebc", "warmup_time": -1}, "bench_core.Core.time_hstack_l": {"code": "class Core:\n    def time_hstack_l(self):\n        np.hstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_hstack_l", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5a9cf1c636c4a08ea95207499ba9a0ef91c6df4e28ec3cea60a7c70196d77c84", "warmup_time": -1}, "bench_core.Core.time_identity_100": {"code": "class Core:\n    def time_identity_100(self):\n        np.identity(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_identity_100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "37e36709346912bfdcd938c6094a705730df17b06fde7286920b7ba39a869a84", "warmup_time": -1}, "bench_core.Core.time_identity_3000": {"code": "class Core:\n    def time_identity_3000(self):\n        np.identity(3000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_identity_3000", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6d24a09d175ca8988d0fe271be94c98978382b45a83b799c8436e40fc781ed07", "warmup_time": -1}, "bench_core.Core.time_ones_100": {"code": "class Core:\n    def time_ones_100(self):\n        np.ones(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_ones_100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "49c5cfc9da2f4dd2763b926806078a0e96a062734fd422a31a72bb8ac6c2a52b", "warmup_time": -1}, "bench_core.Core.time_tril_l10x10": {"code": "class Core:\n    def time_tril_l10x10(self):\n        np.tril(self.l10x10)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_tril_l10x10", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be0b5e9411fa9a46412a3d7e3808de5a3eef0d3c91902942eb8940fe8cd5d59f", "warmup_time": -1}, "bench_core.Core.time_triu_l10x10": {"code": "class Core:\n    def time_triu_l10x10(self):\n        np.triu(self.l10x10)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_triu_l10x10", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "41f430496f537d4183d95954baf932df9301b6752e3f5eabe86d3c1c94bff7c4", "warmup_time": -1}, "bench_core.Core.time_vstack_l": {"code": "class Core:\n    def time_vstack_l(self):\n        np.vstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_vstack_l", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e9fcd243f974df570e622fcc34eb86c28ee5a3b11c827be0f80c38e16a9f14b2", "warmup_time": -1}, "bench_core.Core.time_zeros_100": {"code": "class Core:\n    def time_zeros_100(self):\n        np.zeros(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l10x10 = np.ones((10, 10))", "min_run_count": 2, "name": "bench_core.Core.time_zeros_100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7f0f07d1383bd941b49a1099db8f8302d0f235e1dafde7ae819c9d392d44c42c", "warmup_time": -1}, "bench_core.CorrConv.time_convolve": {"code": "class CorrConv:\n    def time_convolve(self, size1, size2, mode):\n        np.convolve(self.x1, self.x2, mode=mode)\n\n    def setup(self, size1, size2, mode):\n        self.x1 = np.linspace(0, 1, num=size1)\n        self.x2 = np.cos(np.linspace(0, 2*np.pi, num=size2))", "min_run_count": 2, "name": "bench_core.CorrConv.time_convolve", "number": 0, "param_names": ["size1", "size2", "mode"], "params": [["50", "1000", "100000.0"], ["10", "100", "1000", "10000.0"], ["'valid'", "'same'", "'full'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "110934cc16c781cf51ef05e32d0376573f652f8d29632088314c80bb280373f5", "warmup_time": -1}, "bench_core.CorrConv.time_correlate": {"code": "class CorrConv:\n    def time_correlate(self, size1, size2, mode):\n        np.correlate(self.x1, self.x2, mode=mode)\n\n    def setup(self, size1, size2, mode):\n        self.x1 = np.linspace(0, 1, num=size1)\n        self.x2 = np.cos(np.linspace(0, 2*np.pi, num=size2))", "min_run_count": 2, "name": "bench_core.CorrConv.time_correlate", "number": 0, "param_names": ["size1", "size2", "mode"], "params": [["50", "1000", "100000.0"], ["10", "100", "1000", "10000.0"], ["'valid'", "'same'", "'full'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9add985c37891263767f640a8caa0571b67ad9fc64587e26fa1403cdbfd46a20", "warmup_time": -1}, "bench_core.CountNonzero.time_count_nonzero": {"code": "class CountNonzero:\n    def time_count_nonzero(self, numaxes, size, dtype):\n        np.count_nonzero(self.x)\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)", "min_run_count": 2, "name": "bench_core.CountNonzero.time_count_nonzero", "number": 0, "param_names": ["numaxes", "size", "dtype"], "params": [["1", "2", "3"], ["100", "10000", "1000000"], ["<class 'bool'>", "<class 'int'>", "<class 'str'>", "<class 'object'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "62b6e7f8cdf194df64c7d1c6948ebe3b15027b688ac851c288b08bf147ea21c4", "warmup_time": -1}, "bench_core.CountNonzero.time_count_nonzero_axis": {"code": "class CountNonzero:\n    def time_count_nonzero_axis(self, numaxes, size, dtype):\n        np.count_nonzero(self.x, axis=self.x.ndim - 1)\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)", "min_run_count": 2, "name": "bench_core.CountNonzero.time_count_nonzero_axis", "number": 0, "param_names": ["numaxes", "size", "dtype"], "params": [["1", "2", "3"], ["100", "10000", "1000000"], ["<class 'bool'>", "<class 'int'>", "<class 'str'>", "<class 'object'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0af13d073c97801eefc841f06735f316331f6898842d60d7077063e761cc3399", "warmup_time": -1}, "bench_core.CountNonzero.time_count_nonzero_multi_axis": {"code": "class CountNonzero:\n    def time_count_nonzero_multi_axis(self, numaxes, size, dtype):\n        if self.x.ndim >= 2:\n            np.count_nonzero(self.x, axis=(\n                self.x.ndim - 1, self.x.ndim - 2))\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)", "min_run_count": 2, "name": "bench_core.CountNonzero.time_count_nonzero_multi_axis", "number": 0, "param_names": ["numaxes", "size", "dtype"], "params": [["1", "2", "3"], ["100", "10000", "1000000"], ["<class 'bool'>", "<class 'int'>", "<class 'str'>", "<class 'object'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "539135a464660d1aa5d3e83d59b995843997e3e31d51e8e284bfbd83ddad52d3", "warmup_time": -1}, "bench_core.Indices.time_indices": {"code": "class Indices:\n    def time_indices(self):\n        np.indices((1000, 500))", "min_run_count": 2, "name": "bench_core.Indices.time_indices", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2e230aa0719ef3ade68215df513a0a9aafa9d052ee5c2665559e3cea10bf9b51", "warmup_time": -1}, "bench_core.PackBits.time_packbits": {"code": "class PackBits:\n    def time_packbits(self, dtype):\n        np.packbits(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e1cdd058f7cb55eb592d5d4a6d37273683a1ab55041e8c4b4ef7c29e5e55313", "warmup_time": -1}, "bench_core.PackBits.time_packbits_axis0": {"code": "class PackBits:\n    def time_packbits_axis0(self, dtype):\n        np.packbits(self.d2, axis=0)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits_axis0", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3596f631e5980c6f39f8af219cc1bd8bc6cb97ed103fbb9008368ce8e4510c0c", "warmup_time": -1}, "bench_core.PackBits.time_packbits_axis1": {"code": "class PackBits:\n    def time_packbits_axis1(self, dtype):\n        np.packbits(self.d2, axis=1)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits_axis1", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "138b6e3b289ecabf2012d7d40274f69f848fc241c53fe21eb8dcf5ff77dc3dd2", "warmup_time": -1}, "bench_core.Temporaries.time_large": {"code": "class Temporaries:\n    def time_large(self):\n        (self.alarge * 2) + self.blarge\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_large", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1f17784ab0409272af0ac08b2609f381d7257185a54f102e5114b3f8548fbf3", "warmup_time": -1}, "bench_core.Temporaries.time_large2": {"code": "class Temporaries:\n    def time_large2(self):\n        (self.alarge + self.blarge) - 2\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_large2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "23dea77757706f4d1d936f725e42bdc67c57d9b2f919e4da807d26ffe127ca51", "warmup_time": -1}, "bench_core.Temporaries.time_mid": {"code": "class Temporaries:\n    def time_mid(self):\n        (self.amid * 2) + self.bmid\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_mid", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ad3406f4f9a8d7ad3c489e9028cedc12079758fe89272347756b7ea6e011a267", "warmup_time": -1}, "bench_core.Temporaries.time_mid2": {"code": "class Temporaries:\n    def time_mid2(self):\n        (self.amid + self.bmid) - 2\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_mid2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5ad422ecaa9af109188d4d1fcb95cdfe8fce8d2ed999ef8a241e3af3f1677bbe", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits": {"code": "class UnpackBits:\n    def time_unpackbits(self):\n        np.unpackbits(self.d)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8a9b8fdeeee1d01e42caff6c2cd0efc371c72053e373203f670f49c399a19ef2", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits_axis0": {"code": "class UnpackBits:\n    def time_unpackbits_axis0(self):\n        np.unpackbits(self.d2, axis=0)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits_axis0", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b842c713e8a843ac2273fe2f17c174ecd27b28a6dace841dac2a13d913caa8f7", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits_axis1": {"code": "class UnpackBits:\n    def time_unpackbits_axis1(self):\n        np.unpackbits(self.d2, axis=1)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits_axis1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7ac672e3d48251be042a8a5e4b8167dbb3b91f0af99b4f01f9d9287e7561cd73", "warmup_time": -1}, "bench_function_base.Bincount.time_bincount": {"code": "class Bincount:\n    def time_bincount(self):\n        np.bincount(self.d)\n\n    def setup(self):\n        self.d = np.arange(80000, dtype=np.intp)\n        self.e = self.d.astype(np.float64)", "min_run_count": 2, "name": "bench_function_base.Bincount.time_bincount", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5d90f434eae543f580a5bb7f86e14c4663521f721b5a056155c61223dec781e4", "warmup_time": -1}, "bench_function_base.Bincount.time_weights": {"code": "class Bincount:\n    def time_weights(self):\n        np.bincount(self.d, weights=self.e)\n\n    def setup(self):\n        self.d = np.arange(80000, dtype=np.intp)\n        self.e = self.d.astype(np.float64)", "min_run_count": 2, "name": "bench_function_base.Bincount.time_weights", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "21806334def6c126f9bb25e7ed2a2e4d9be995f373cd288727bb4d8e33bb11cb", "warmup_time": -1}, "bench_function_base.Histogram1D.time_fine_binning": {"code": "class Histogram1D:\n    def time_fine_binning(self):\n        np.histogram(self.d, 10000, (0, 100))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)", "min_run_count": 2, "name": "bench_function_base.Histogram1D.time_fine_binning", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fd9a7cd0ee34b75f9eddd8c022b58b149397c82b4bd22de6fdb8b6e23c72e19c", "warmup_time": -1}, "bench_function_base.Histogram1D.time_full_coverage": {"code": "class Histogram1D:\n    def time_full_coverage(self):\n        np.histogram(self.d, 200, (0, 100))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)", "min_run_count": 2, "name": "bench_function_base.Histogram1D.time_full_coverage", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7a6b3163b94451004a6b27ea9f14f9aa6c0e86e437074c1558a53ad422af141a", "warmup_time": -1}, "bench_function_base.Histogram1D.time_small_coverage": {"code": "class Histogram1D:\n    def time_small_coverage(self):\n        np.histogram(self.d, 200, (50, 51))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)", "min_run_count": 2, "name": "bench_function_base.Histogram1D.time_small_coverage", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "324b8676b5ae4c324e05671ffe2058af996d3cb540d845b6701cbae68eb26d99", "warmup_time": -1}, "bench_function_base.Histogram2D.time_fine_binning": {"code": "class Histogram2D:\n    def time_fine_binning(self):\n        np.histogramdd(self.d, (10000, 10000), ((0, 100), (0, 100)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))", "min_run_count": 2, "name": "bench_function_base.Histogram2D.time_fine_binning", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2f6f1c99fb221c95e8526dc863c8b1e72546468bf162e20e62539f171241ceae", "warmup_time": -1}, "bench_function_base.Histogram2D.time_full_coverage": {"code": "class Histogram2D:\n    def time_full_coverage(self):\n        np.histogramdd(self.d, (200, 200), ((0, 100), (0, 100)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))", "min_run_count": 2, "name": "bench_function_base.Histogram2D.time_full_coverage", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "79d7122f11109af1751f17c3a36c5df88fa3cbb842d49a9859528c7ea37eaf4f", "warmup_time": -1}, "bench_function_base.Histogram2D.time_small_coverage": {"code": "class Histogram2D:\n    def time_small_coverage(self):\n        np.histogramdd(self.d, (200, 200), ((50, 51), (50, 51)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))", "min_run_count": 2, "name": "bench_function_base.Histogram2D.time_small_coverage", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e8ff2855bc11b18b68832bbd0917468aab6b272a86ec5cf2fd1ac46d3e39adf5", "warmup_time": -1}, "bench_function_base.Median.time_even": {"code": "class Median:\n    def time_even(self):\n        np.median(self.e)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Median.time_even", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c8988ee7d7d40ea51759e7382820be86368c85ad7a8b4ea6bc5d7cf039ad7d0b", "warmup_time": -1}, "bench_function_base.Median.time_even_inplace": {"code": "class Median:\n    def time_even_inplace(self):\n        np.median(self.e, overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Median.time_even_inplace", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4de6b4c5c6fe319606c87af121f4b930d52e60a79b55f19d3e46e759968e8517", "warmup_time": -1}, "bench_function_base.Median.time_even_small": {"code": "class Median:\n    def time_even_small(self):\n        np.median(self.e[:500], overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Median.time_even_small", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ac742d35aa5ca0643a11510aa902569489bf2b225d71a6c8cc12d508167104d0", "warmup_time": -1}, "bench_function_base.Median.time_odd": {"code": "class Median:\n    def time_odd(self):\n        np.median(self.o)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Median.time_odd", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a7c0e54fb005a3f790f8317492d495aa785a5b118a0618dd2c24628ca8289c73", "warmup_time": -1}, "bench_function_base.Median.time_odd_inplace": {"code": "class Median:\n    def time_odd_inplace(self):\n        np.median(self.o, overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Median.time_odd_inplace", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1bcac9a503f2c82792750b26cca859f5c4fa6791d4babfe6200a1c305a196fb0", "warmup_time": -1}, "bench_function_base.Median.time_odd_small": {"code": "class Median:\n    def time_odd_small(self):\n        np.median(self.o[:500], overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Median.time_odd_small", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0b2f23a3032466239bec187b638bc54306788a911d41d58aec416e4f023afb5c", "warmup_time": -1}, "bench_function_base.Percentile.time_percentile": {"code": "class Percentile:\n    def time_percentile(self):\n        np.percentile(self.e, [25, 35, 55, 65, 75])\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Percentile.time_percentile", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5fa63bb5a8b13b569acb81041b61348497a56baf4d93535578165158f78697b0", "warmup_time": -1}, "bench_function_base.Percentile.time_quartile": {"code": "class Percentile:\n    def time_quartile(self):\n        np.percentile(self.e, [25, 75])\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Percentile.time_quartile", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a7a60e6bb5900bd1b6710d05fdd72798f76a270afd501a0c11b5917020cba619", "warmup_time": -1}, "bench_function_base.Select.time_select": {"code": "class Select:\n    def time_select(self):\n        np.select(self.cond, [self.d, self.e])\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = [(self.d > 4), (self.d < 2)]\n        self.cond_large = [(self.d > 4), (self.d < 2)] * 10", "min_run_count": 2, "name": "bench_function_base.Select.time_select", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "89f02a048ace03b6c3269e61811da1ece2dab2a456536225dafaccbc385920a7", "warmup_time": -1}, "bench_function_base.Select.time_select_larger": {"code": "class Select:\n    def time_select_larger(self):\n        np.select(self.cond_large, ([self.d, self.e] * 10))\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = [(self.d > 4), (self.d < 2)]\n        self.cond_large = [(self.d > 4), (self.d < 2)] * 10", "min_run_count": 2, "name": "bench_function_base.Select.time_select_larger", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a702e09750946268c44bce105934f13f28b8abe05f71a1f660e967804fafd305", "warmup_time": -1}, "bench_function_base.Sort.time_argsort": {"code": "class Sort:\n    def time_argsort(self):\n        self.e.argsort()\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_argsort", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cd13571c160cd607bd408fdef0a5ac9848458656011a46c22b053ee9c5b40598", "warmup_time": -1}, "bench_function_base.Sort.time_argsort_random": {"code": "class Sort:\n    def time_argsort_random(self):\n        self.o.argsort()\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_argsort_random", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c1a70d6eb13168c103783c29dc950f7322fa7f8fc39391380ba1a1ffef32f435", "warmup_time": -1}, "bench_function_base.Sort.time_sort": {"code": "class Sort:\n    def time_sort(self):\n        np.sort(self.e)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6249cbe0ada6b3c541dabcdc5dfe1edf5eb5b56f2573f0ad5b49d61ec2d1d160", "warmup_time": -1}, "bench_function_base.Sort.time_sort_equal": {"code": "class Sort:\n    def time_sort_equal(self):\n        self.equal.sort()\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort_equal", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fad04601a87b2ed2015e03cdf99d2f4089231c44148aac807db514818414423a", "warmup_time": -1}, "bench_function_base.Sort.time_sort_inplace": {"code": "class Sort:\n    def time_sort_inplace(self):\n        self.e.sort()\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort_inplace", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "517171ab3a36cb6ae342b76c0766730ad67a563d305e10e45dde1bd1825de767", "warmup_time": -1}, "bench_function_base.Sort.time_sort_many_equal": {"code": "class Sort:\n    def time_sort_many_equal(self):\n        self.many_equal.sort()\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort_many_equal", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "958a529394a591859f6ff7be9fb3495302ca4b4f343cd89889aa6508c1228f64", "warmup_time": -1}, "bench_function_base.Sort.time_sort_random": {"code": "class Sort:\n    def time_sort_random(self):\n        np.sort(self.o)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        np.random.seed(25)\n        np.random.shuffle(self.o)\n        # quicksort implementations can have issues with equal elements\n        self.equal = np.ones(10000)\n        self.many_equal = np.sort(np.arange(10000) % 10)", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort_random", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "220c7c1f6ffc4c139aa7c835e8426307d484821201e70343014f406fee2c6630", "warmup_time": -1}, "bench_function_base.Sort.time_sort_worst": {"code": "class SortWorst:\n    def time_sort_worst(self):\n        np.sort(self.worst)\n\n    def setup(self):\n        # quicksort median of 3 worst case\n        self.worst = np.arange(1000000)\n        x = self.worst\n        while x.size > 3:\n            mid = x.size // 2\n            x[mid], x[-2] = x[-2], x[mid]\n            x = x[:-2]", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort_worst", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ace32d23c7f67f08c3993d54ad4d4b67cd9b56a42a8b95f830141cce64e1d6ec", "warmup_time": -1}, "bench_function_base.Where.time_1": {"code": "class Where:\n    def time_1(self):\n        np.where(self.cond)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)", "min_run_count": 2, "name": "bench_function_base.Where.time_1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4b1f7a67860008b1fa0d58ddf29ace0f2ae879a9c19c7c0da4dc5ec9f9c3e075", "warmup_time": -1}, "bench_function_base.Where.time_2": {"code": "class Where:\n    def time_2(self):\n        np.where(self.cond, self.d, self.e)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)", "min_run_count": 2, "name": "bench_function_base.Where.time_2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9aab7b536e740af04ddd0a32c17a5359fb6db1f56304795fbbef62ffe6a08a63", "warmup_time": -1}, "bench_function_base.Where.time_2_broadcast": {"code": "class Where:\n    def time_2_broadcast(self):\n        np.where(self.cond, self.d, 0)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)", "min_run_count": 2, "name": "bench_function_base.Where.time_2_broadcast", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2e8c53780a92870cc414371e711fb188646805ba43e4159157bc05fa6b822e6f", "warmup_time": -1}, "bench_indexing.Indexing.time_op": {"code": "class Indexing:\n    def time_op(self, indexes, sel, op):\n        self.func()\n\n    def setup(self, indexes, sel, op):\n        sel = sel.replace('I', indexes)\n    \n        ns = {'squares_': get_squares_(),\n              'np': np,\n              'indexes_': get_indexes_(),\n              'indexes_rand_': get_indexes_rand_()}\n    \n        if sys.version_info[0] >= 3:\n            code = \"def run():\\n    for a in squares_.values(): a[%s]%s\"\n        else:\n            code = \"def run():\\n    for a in squares_.itervalues(): a[%s]%s\"\n        code = code % (sel, op)\n    \n        six.exec_(code, ns)\n        self.func = ns['run']", "min_run_count": 2, "name": "bench_indexing.Indexing.time_op", "number": 0, "param_names": ["indexes", "sel", "op"], "params": [["'indexes_'", "'indexes_rand_'"], ["'I'", "':,I'", "'np.ix_(I, I)'"], ["''", "'=1'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8e81170dbb15a18eb2b16d07e38db1fd58cca525b31b641bee28288c3a36d997", "warmup_time": -1}, "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing": {"code": "class IndexingSeparate:\n    def time_mmap_fancy_indexing(self):\n        for i in range(1000):\n            self.fp[self.indexes]\n\n    def setup(self):\n        self.tmp_dir = mkdtemp()\n        self.fp = memmap(pjoin(self.tmp_dir, 'tmp.dat'),\n                         dtype=float32, mode='w+', shape=(50, 60))\n        self.indexes = array([3, 4, 6, 10, 20])", "min_run_count": 2, "name": "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d511fabf6c9d75bca8e0c77070a292a7498f23fd253bf151c2d0472028c8e375", "warmup_time": -1}, "bench_indexing.IndexingSeparate.time_mmap_slicing": {"code": "class IndexingSeparate:\n    def time_mmap_slicing(self):\n        for i in range(1000):\n            self.fp[5:10]\n\n    def setup(self):\n        self.tmp_dir = mkdtemp()\n        self.fp = memmap(pjoin(self.tmp_dir, 'tmp.dat'),\n                         dtype=float32, mode='w+', shape=(50, 60))\n        self.indexes = array([3, 4, 6, 10, 20])", "min_run_count": 2, "name": "bench_indexing.IndexingSeparate.time_mmap_slicing", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8aac8af758ba563381c8d021d9163a34a1652b3fcc129ec3555e9221a785b469", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_array_all": {"code": "class IndexingStructured0D:\n    def time_array_all(self):\n        self.B['a'] = self.A['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_array_all", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "972e93e84611a6e63b6d9fe5d2019b3b54f98452ed2b237b58f4d58bbde4072b", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_array_slice": {"code": "class IndexingStructured0D:\n    def time_array_slice(self):\n        self.B['a'][:] = self.A['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_array_slice", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7884c48afe99676d42705373c0678163cd9358c0af75b3888566a78b64b1a0ae", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_scalar_all": {"code": "class IndexingStructured0D:\n    def time_scalar_all(self):\n        self.b['a'] = self.a['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_scalar_all", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3379d09fc19f9b870f4e9a930bc98b6cda21f792cfb9caf37992752c1ed04c9e", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_scalar_slice": {"code": "class IndexingStructured0D:\n    def time_scalar_slice(self):\n        self.b['a'][:] = self.a['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_scalar_slice", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ffcfe894af4580d854b9e8b2d38687ab9ee9c372cc0d50fd467e5eab42e974ce", "warmup_time": -1}, "bench_io.Copy.time_cont_assign": {"code": "class Copy:\n    def time_cont_assign(self, typename):\n        self.d[...] = 1\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_cont_assign", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "afe3edcb5a646c1dd3efa7d2b5084f3759d877cec053e46705ac093e8bafbddd", "warmup_time": -1}, "bench_io.Copy.time_memcpy": {"code": "class Copy:\n    def time_memcpy(self, typename):\n        self.d[...] = self.e_d\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_memcpy", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8e4099e96ab5221807bc0dd397733a0016f6f1bbbca8f5b800a8249a6e72bc7e", "warmup_time": -1}, "bench_io.Copy.time_memcpy_large_out_of_place": {"code": "class Copy:\n    def time_memcpy_large_out_of_place(self, typename):\n        l = np.ones(1024**2, dtype=np.dtype(typename))\n        l.copy()\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_memcpy_large_out_of_place", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "862a7ab3e90582f36eae4004c8ed717e47fc8e8fa042cf49b6c12a5df1d6b4c7", "warmup_time": -1}, "bench_io.Copy.time_strided_assign": {"code": "class Copy:\n    def time_strided_assign(self, typename):\n        self.dflat[::2] = 2\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_strided_assign", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "61d585e17292b3b6a8aba7775561f3fbffe991d8655b2335bfdbf1c83de99915", "warmup_time": -1}, "bench_io.Copy.time_strided_copy": {"code": "class Copy:\n    def time_strided_copy(self, typename):\n        self.d[...] = self.e.T\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_strided_copy", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e431dccc9dca8066e5245473c4aa724314bd94e7a7a5db466deb0e5cfcfab482", "warmup_time": -1}, "bench_io.CopyTo.time_copyto": {"code": "class CopyTo:\n    def time_copyto(self):\n        np.copyto(self.d, self.e)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "07950888132a0948b3c041b33f0f183b09ef914213babe934461be9b316d3221", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_8_dense": {"code": "class CopyTo:\n    def time_copyto_8_dense(self):\n        np.copyto(self.d, self.e, where=self.im8)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_8_dense", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a73b9cc35e00d11b5cd0365076a62b7e2e3058a742abdac1ff0632af2afa63ce", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_8_sparse": {"code": "class CopyTo:\n    def time_copyto_8_sparse(self):\n        np.copyto(self.d, self.e, where=self.m8)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_8_sparse", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b3380a508d21032c997a83cb0f5f88e055d7c440b0e802e3856e0bba7b42699", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_dense": {"code": "class CopyTo:\n    def time_copyto_dense(self):\n        np.copyto(self.d, self.e, where=self.im)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_dense", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3fc8f0ec8a3cbc2c0e6efed89c18560d81b4f3055eedac3e4cc6fb8f0ea88b6f", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_sparse": {"code": "class CopyTo:\n    def time_copyto_sparse(self):\n        np.copyto(self.d, self.e, where=self.m)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_sparse", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8b3edb57c11fe88b4cb32c4a592531aad95d8749f99cdaa508ad926e7411faf0", "warmup_time": -1}, "bench_io.LoadtxtCSVComments.time_comment_loadtxt_csv": {"code": "class LoadtxtCSVComments:\n    def time_comment_loadtxt_csv(self, num_lines):\n        # benchmark handling of lines with comments\n        # when loading in from csv files\n    \n        # inspired by similar benchmark in pandas\n        # for read_csv\n    \n        # need to rewind StringIO object (unfortunately\n        # confounding timing result somewhat) for every\n        # call to timing test proper\n        np.loadtxt(self.data_comments,\n                   delimiter=u',')\n        self.data_comments.seek(0)\n\n    def setup(self, num_lines):\n        data = [u'1,2,3 # comment'] * num_lines\n        # unfortunately, timeit will only run setup()\n        # between repeat events, but not for iterations\n        # within repeats, so the StringIO object\n        # will have to be rewinded in the benchmark proper\n        self.data_comments = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtCSVComments.time_comment_loadtxt_csv", "number": 0, "param_names": ["num_lines"], "params": [["10", "100", "10000", "100000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc3091851c3292f70850fcd7eb14ea6ca5884ac7374b43c01263cad29f7f685a", "warmup_time": -1}, "bench_io.LoadtxtCSVDateTime.time_loadtxt_csv_datetime": {"code": "class LoadtxtCSVDateTime:\n    def time_loadtxt_csv_datetime(self, num_lines):\n        # rewind StringIO object -- the timing iterations\n        # are state-dependent\n        X = np.loadtxt(self.csv_data,\n                       delimiter=u',',\n                       dtype=([('dates', 'M8[us]'),\n                               ('values', 'float64')]))\n        self.csv_data.seek(0)\n\n    def setup(self, num_lines):\n        # create the equivalent of a two-column CSV file\n        # with date strings in the first column and random\n        # floating point data in the second column\n        dates = np.arange('today', 20, dtype=np.datetime64)\n        np.random.seed(123)\n        values = np.random.rand(20)\n        date_line = u''\n    \n        for date, value in zip(dates, values):\n            date_line += (str(date) + ',' + str(value) + '\\n')\n    \n        # expand data to specified number of lines\n        data = date_line * (num_lines // 20)\n        self.csv_data = StringIO(data)", "min_run_count": 2, "name": "bench_io.LoadtxtCSVDateTime.time_loadtxt_csv_datetime", "number": 0, "param_names": ["num_lines"], "params": [["20", "200", "2000", "20000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "70095fef3c3845550dc9746c84e9f3b187983185c2e2c9d633fd2311bc7ba481", "warmup_time": -1}, "bench_io.LoadtxtCSVSkipRows.time_skiprows_csv": {"code": "class LoadtxtCSVSkipRows:\n    def time_skiprows_csv(self, skiprows):\n        np.loadtxt(self.fname,\n                   delimiter=',',\n                   skiprows=skiprows)\n\n    def setup(self, skiprows):\n        np.random.seed(123)\n        test_array = np.random.rand(100000, 3)\n        self.fname = 'test_array.csv'\n        np.savetxt(fname=self.fname,\n                   X=test_array,\n                   delimiter=',')", "min_run_count": 2, "name": "bench_io.LoadtxtCSVSkipRows.time_skiprows_csv", "number": 0, "param_names": ["skiprows"], "params": [["0", "500", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3e404fbe768ffacb38decdc20759baa4c49675a337db49def01ca2ad8ec05f2b", "warmup_time": -1}, "bench_io.LoadtxtCSVStructured.time_loadtxt_csv_struct_dtype": {"code": "class LoadtxtCSVStructured:\n    def time_loadtxt_csv_struct_dtype(self):\n        # obligate rewind of StringIO object\n        # between iterations of a repeat:\n    \n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   dtype=[('category_1', 'S1'),\n                          ('category_2', 'i4'),\n                          ('category_3', 'f8'),\n                          ('category_4', 'S1'),\n                          ('category_5', 'f8')])\n        self.csv_data.seek(0)\n\n    def setup(self):\n        num_lines = 50000\n        data = [u\"M, 21, 72, X, 155\"] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtCSVStructured.time_loadtxt_csv_struct_dtype", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "07198d0fb34f51c139a680e174f6a1285f06d00a9779f096ddd73c2969678198", "warmup_time": -1}, "bench_io.LoadtxtCSVdtypes.time_loadtxt_dtypes_csv": {"code": "class LoadtxtCSVdtypes:\n    def time_loadtxt_dtypes_csv(self, dtype, num_lines):\n        # benchmark loading arrays of various dtypes\n        # from csv files\n    \n        # state-dependent timing benchmark requires\n        # rewind of StringIO object\n    \n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   dtype=dtype)\n        self.csv_data.seek(0)\n\n    def setup(self, dtype, num_lines):\n        data = [u'5, 7, 888'] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtCSVdtypes.time_loadtxt_dtypes_csv", "number": 0, "param_names": ["dtype", "num_lines"], "params": [["'float32'", "'float64'", "'int32'", "'int64'", "'complex128'", "'str'", "'object'"], ["10", "100", "10000", "100000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "187d12d6e571661ff9c309e9eceac39f4c4f8767bb2b29b883971db26e32f00d", "warmup_time": -1}, "bench_io.LoadtxtReadUint64Integers.time_read_uint64": {"code": "class LoadtxtReadUint64Integers:\n    def time_read_uint64(self, size):\n        # mandatory rewind of StringIO object\n        # between iterations of a repeat:\n        np.loadtxt(self.data1)\n        self.data1.seek(0)\n\n    def setup(self, size):\n        arr = np.arange(size).astype('uint64') + 2**63\n        self.data1 = StringIO(u'\\n'.join(arr.astype(str).tolist()))\n        arr = arr.astype(object)\n        arr[500] = -1\n        self.data2 = StringIO(u'\\n'.join(arr.astype(str).tolist()))", "min_run_count": 2, "name": "bench_io.LoadtxtReadUint64Integers.time_read_uint64", "number": 0, "param_names": ["size"], "params": [["550", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8bece444885419bd9c391480f21d71718360ad70d21ff3a2e9f3686d6308bbaf", "warmup_time": -1}, "bench_io.LoadtxtReadUint64Integers.time_read_uint64_neg_values": {"code": "class LoadtxtReadUint64Integers:\n    def time_read_uint64_neg_values(self, size):\n        # mandatory rewind of StringIO object\n        # between iterations of a repeat:\n        np.loadtxt(self.data2)\n        self.data2.seek(0)\n\n    def setup(self, size):\n        arr = np.arange(size).astype('uint64') + 2**63\n        self.data1 = StringIO(u'\\n'.join(arr.astype(str).tolist()))\n        arr = arr.astype(object)\n        arr[500] = -1\n        self.data2 = StringIO(u'\\n'.join(arr.astype(str).tolist()))", "min_run_count": 2, "name": "bench_io.LoadtxtReadUint64Integers.time_read_uint64_neg_values", "number": 0, "param_names": ["size"], "params": [["550", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5052543cb6a21400dfb8700019b08f81d3edfdeeb85fab940f5ce3e19325a976", "warmup_time": -1}, "bench_io.LoadtxtUseColsCSV.time_loadtxt_usecols_csv": {"code": "class LoadtxtUseColsCSV:\n    def time_loadtxt_usecols_csv(self, usecols):\n        # must rewind StringIO because of state\n        # dependence of file reading\n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   usecols=usecols)\n        self.csv_data.seek(0)\n\n    def setup(self, usecols):\n        num_lines = 5000\n        data = [u'0, 1, 2, 3, 4, 5, 6, 7, 8, 9'] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtUseColsCSV.time_loadtxt_usecols_csv", "number": 0, "param_names": ["usecols"], "params": [["2", "[1, 3]", "[1, 3, 5, 7]"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fb0b1e5cb45978fdd468073eb5f8645968a9ad1bb6fb7cd02dc1d7541791fefe", "warmup_time": -1}, "bench_io.Savez.time_vb_savez_squares": {"code": "class Savez:\n    def time_vb_savez_squares(self):\n        np.savez('tmp.npz', self.squares)\n\n    def setup(self):\n        self.squares = get_squares()", "min_run_count": 2, "name": "bench_io.Savez.time_vb_savez_squares", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bf5d4156c36f7ad4dd4e80c5e8f2585466a5a8337878eea473d19b7048bdca46", "warmup_time": -1}, "bench_lib.Pad.time_pad": {"code": "class Pad:\n    def time_pad(self, shape, pad_width, mode):\n        np.pad(self.array, pad_width, mode)\n\n    def setup(self, shape, pad_width, mode):\n        # avoid np.zeros or np.empty's lazy allocation.\n        # np.full causes pagefaults to occur during setup\n        # instead of during the benchmark\n        self.array = np.full(shape, 0)", "min_run_count": 2, "name": "bench_lib.Pad.time_pad", "number": 0, "param_names": ["shape", "pad_width", "mode"], "params": [["(1000,)", "(10, 100)", "(10, 10, 10)"], ["1", "3", "(0, 5)"], ["'constant'", "'edge'", "'linear_ramp'", "'mean'", "'reflect'", "'wrap'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c3c9afd560b04e9f8ec00633ce180bee67c48c0447513b7aba436ffad8753c1e", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_a_b": {"code": "class Eindot:\n    def time_dot_a_b(self):\n        np.dot(self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_a_b", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "90f6bce9991a3ec6b21cdb7d7612044fe2ab4a6f4baa4d09ad9f1532ae1ed729", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_d_dot_b_c": {"code": "class Eindot:\n    def time_dot_d_dot_b_c(self):\n        np.dot(self.d, np.dot(self.b, self.c))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_d_dot_b_c", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bfab7b7d665b79c0d6cd60cdebb0069198b221c435e1376c860d9547ffed5a3b", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_a_at": {"code": "class Eindot:\n    def time_dot_trans_a_at(self):\n        np.dot(self.a, self.at)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_a_at", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5312f8c34eaec25db7229551b2d1b3a36a60967397e0d6c2a5f3dd2ef7c9da39", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_a_atc": {"code": "class Eindot:\n    def time_dot_trans_a_atc(self):\n        np.dot(self.a, self.atc)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_a_atc", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2aaf3ac46d4867f457064a7af0eb0bb69d2357840c425d21e2dca264654ab0e7", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_at_a": {"code": "class Eindot:\n    def time_dot_trans_at_a(self):\n        np.dot(self.at, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_at_a", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3f4eddebca7bb5be74255d929a51634b57aa16904159810bcf998c44c82852fc", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_atc_a": {"code": "class Eindot:\n    def time_dot_trans_atc_a(self):\n        np.dot(self.atc, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_atc_a", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "59ac3a40d150a1adaabb06fb254b4308c270e5cd305fb71a0422fc0d352fb0f6", "warmup_time": -1}, "bench_linalg.Eindot.time_einsum_i_ij_j": {"code": "class Eindot:\n    def time_einsum_i_ij_j(self):\n        np.einsum('i,ij,j', self.d, self.b, self.c)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_einsum_i_ij_j", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b1430a7cb033c76f16784f9e1ad22a1823dc42f09801eff4f508a03fa87a5894", "warmup_time": -1}, "bench_linalg.Eindot.time_einsum_ij_jk_a_b": {"code": "class Eindot:\n    def time_einsum_ij_jk_a_b(self):\n        np.einsum('ij,jk', self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_einsum_ij_jk_a_b", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f59314fd417195a44f7811dc7866043d4ac947486c2065d5e76667cd3efd9b2a", "warmup_time": -1}, "bench_linalg.Eindot.time_einsum_ijk_jil_kl": {"code": "class Eindot:\n    def time_einsum_ijk_jil_kl(self):\n        np.einsum('ijk,jil->kl', self.a3, self.b3)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_einsum_ijk_jil_kl", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca6de720148ca6468c9b96c0a584634bfd37611a176acf7aceb072a6b6d523a9", "warmup_time": -1}, "bench_linalg.Eindot.time_inner_trans_a_a": {"code": "class Eindot:\n    def time_inner_trans_a_a(self):\n        np.inner(self.a, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_inner_trans_a_a", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ff937aafce634b08b6e5a183252e02a459877dcfbfc6c7a2dc38a2a0bc2ec61f", "warmup_time": -1}, "bench_linalg.Eindot.time_inner_trans_a_ac": {"code": "class Eindot:\n    def time_inner_trans_a_ac(self):\n        np.inner(self.a, self.ac)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_inner_trans_a_ac", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "75be1a984676fcf27a3f71634783126016d5893ab4806f17cc8fc5b9dd0481ed", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_a_b": {"code": "class Eindot:\n    def time_matmul_a_b(self):\n        np.matmul(self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_a_b", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8de65997a20d204169d458a6c8dbd028e175482b00a244e57bee527705d8049d", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_d_matmul_b_c": {"code": "class Eindot:\n    def time_matmul_d_matmul_b_c(self):\n        np.matmul(self.d, np.matmul(self.b, self.c))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_d_matmul_b_c", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "29cf075642392ec27e0bf81b3c28ed75d0470a4c9180bbe2a32673affb49c2dd", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_a_at": {"code": "class Eindot:\n    def time_matmul_trans_a_at(self):\n        np.matmul(self.a, self.at)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_a_at", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e3c80942140f34f39e469517660d62496f439c0e2b4e8f1e21e0097af4ec25a9", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_a_atc": {"code": "class Eindot:\n    def time_matmul_trans_a_atc(self):\n        np.matmul(self.a, self.atc)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_a_atc", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "80227843461ad996deb3d17b6b0e1ffc84a639663196e31a9bb49846e9e72da6", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_at_a": {"code": "class Eindot:\n    def time_matmul_trans_at_a(self):\n        np.matmul(self.at, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_at_a", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b9ed64e91ad9ac7937d4064ed9c1f7a432c0df7b6f912e029126146d76493e97", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_atc_a": {"code": "class Eindot:\n    def time_matmul_trans_atc_a(self):\n        np.matmul(self.atc, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_atc_a", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7d84f2dd41ff3b11ae8fbd1c920eeb5f02793f02d93e39fa84bcb2815ea1a9c1", "warmup_time": -1}, "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1": {"code": "class Eindot:\n    def time_tensordot_a_b_axes_1_0_0_1(self):\n        np.tensordot(self.a3, self.b3, axes=([1, 0], [0, 1]))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e0e115ed5626e3f37056c84484c86e35bc62234e7781a233afc1e6a00c19c8c5", "warmup_time": -1}, "bench_linalg.Linalg.time_op": {"code": "class Linalg:\n    def time_op(self, op, typename):\n        self.func(self.a)\n\n    def setup(self, op, typename):\n        np.seterr(all='ignore')\n    \n        self.func = getattr(np.linalg, op)\n    \n        if op == 'cholesky':\n            # we need a positive definite\n            self.a = np.dot(get_squares_()[typename],\n                            get_squares_()[typename].T)\n        else:\n            self.a = get_squares_()[typename]\n    \n        # check that dtype is supported at all\n        try:\n            self.func(self.a[:2, :2])\n        except TypeError:\n            raise NotImplementedError()", "min_run_count": 2, "name": "bench_linalg.Linalg.time_op", "number": 0, "param_names": ["op", "type"], "params": [["'svd'", "'pinv'", "'det'", "'norm'"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "af5f67d37b335b9d90510e579b0a142550c4a692f3409adff2c2fbcb835b5034", "warmup_time": -1}, "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64": {"code": "class Lstsq:\n    def time_numpy_linalg_lstsq_a__b_float64(self):\n        np.linalg.lstsq(self.a, self.b)\n\n    def setup(self):\n        self.a = get_squares_()['float64']\n        self.b = get_indexes_rand()[:100].astype(np.float64)", "min_run_count": 2, "name": "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b3b8b561aa8290b4ed0cc8aff549e83c4e3a04c634425538277ba330b51349c2", "warmup_time": -1}, "bench_ma.Concatenate.time_it": {"code": "class Concatenate:\n    def time_it(self, mode, n):\n        np.ma.concatenate(self.args)\n\n    def setup(self, mode, n):\n        # avoid np.zeros's lazy allocation that cause page faults during benchmark.\n        # np.fill will cause pagefaults to happen during setup.\n        normal = np.full((n, n), 0, int)\n        unmasked = np.ma.zeros((n, n), int)\n        masked = np.ma.array(normal, mask=True)\n    \n        mode_parts = mode.split('+')\n        base = mode_parts[0]\n        promote = 'masked' in mode_parts[1:]\n    \n        if base == 'ndarray':\n            args = 10 * (normal,)\n        elif base == 'unmasked':\n            args = 10 * (unmasked,)\n        else:\n            args = 10 * (masked,)\n    \n        if promote:\n            args = args[:-1] + (masked,)\n    \n        self.args = args", "min_run_count": 2, "name": "bench_ma.Concatenate.time_it", "number": 0, "param_names": ["mode", "n"], "params": [["'ndarray'", "'unmasked'", "'ndarray+masked'", "'unmasked+masked'", "'masked'"], ["2", "100", "2000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c5266b41dad24011ae7e64de9ff53d788ddeb5d55cbb4cff451dc49af0c70298", "warmup_time": -1}, "bench_ma.Indexing.time_0d": {"code": "class Indexing:\n    def time_0d(self, masked, ndim, size):\n        self.m[self.idx_0d]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)", "min_run_count": 2, "name": "bench_ma.Indexing.time_0d", "number": 0, "param_names": ["masked", "ndim", "size"], "params": [["True", "False"], ["1", "2"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3af17398e826ce96894f8d9e3df13390b6057d8ab4646cccf3dafe3a6b530dea", "warmup_time": -1}, "bench_ma.Indexing.time_1d": {"code": "class Indexing:\n    def time_1d(self, masked, ndim, size):\n        self.m[self.idx_1d]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)", "min_run_count": 2, "name": "bench_ma.Indexing.time_1d", "number": 0, "param_names": ["masked", "ndim", "size"], "params": [["True", "False"], ["1", "2"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2dc73766d9324469077751387174000e90cd198310ae5d0b5bbfbe2b3a0b1d55", "warmup_time": -1}, "bench_ma.Indexing.time_scalar": {"code": "class Indexing:\n    def time_scalar(self, masked, ndim, size):\n        self.m[self.idx_scalar]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)", "min_run_count": 2, "name": "bench_ma.Indexing.time_scalar", "number": 0, "param_names": ["masked", "ndim", "size"], "params": [["True", "False"], ["1", "2"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "20842912a6d684f5d66c15e2ef6fc5994066b617ff4c673efb382b98bd70c190", "warmup_time": -1}, "bench_ma.MA.time_masked_array": {"code": "class MA:\n    def time_masked_array(self):\n        np.ma.masked_array()\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)", "min_run_count": 2, "name": "bench_ma.MA.time_masked_array", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "569cb888c6b874c3b64957cab882b3e04f2d830d4581ce6aed29c758d2c32fa2", "warmup_time": -1}, "bench_ma.MA.time_masked_array_l100": {"code": "class MA:\n    def time_masked_array_l100(self):\n        np.ma.masked_array(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)", "min_run_count": 2, "name": "bench_ma.MA.time_masked_array_l100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1bd9f2518b045c4e7f662bb4528b56e49605d20fd412c8657d0ef38741838eb5", "warmup_time": -1}, "bench_ma.MA.time_masked_array_l100_t100": {"code": "class MA:\n    def time_masked_array_l100_t100(self):\n        np.ma.masked_array(self.l100, self.t100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)", "min_run_count": 2, "name": "bench_ma.MA.time_masked_array_l100_t100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5756fb2ab73509c5b839cd02f3317b36da59fd9b3eee66bad94c4cde42a86bb9", "warmup_time": -1}, "bench_ma.UFunc.time_1d": {"code": "class UFunc:\n    def time_1d(self, a_masked, b_masked, size):\n        np.ma.add(self.a_1d, self.b_1d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_1d", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3367abb12ea2e83d13287419c09a5fcfdec21cb8b976041105622e5f2455219a", "warmup_time": -1}, "bench_ma.UFunc.time_2d": {"code": "class UFunc:\n    def time_2d(self, a_masked, b_masked, size):\n        # broadcasting happens this time\n        np.ma.add(self.a_2d, self.b_2d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_2d", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2f6eefd233384bed94c580db5fcefc09e11a86f0008ccf16cbf1dff95b0b9c23", "warmup_time": -1}, "bench_ma.UFunc.time_scalar": {"code": "class UFunc:\n    def time_scalar(self, a_masked, b_masked, size):\n        np.ma.add(self.a_scalar, self.b_scalar)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_scalar", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4496f86f82cad9053c558f7f3b1f7a8ad9ccd4d18b3a7d5dd2e0dd1192c8e4d9", "warmup_time": -1}, "bench_ma.UFunc.time_scalar_1d": {"code": "class UFunc:\n    def time_scalar_1d(self, a_masked, b_masked, size):\n        np.ma.add(self.a_scalar, self.b_1d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_scalar_1d", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "98dfb3a1d0e42b2006cb34ac1dde59953825c9fbf5f1d3685a4ca3127525adc6", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_broadcast_to_duck": {"code": "class ArrayFunction:\n    def time_mock_broadcast_to_duck(self):\n        mock_broadcast_to(self.duck_array, ())\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_broadcast_to_duck", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b54211444ccedb1ab418dbbf6ec0f6a2ef4262f33dff86946a325e943e80ba0e", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_broadcast_to_numpy": {"code": "class ArrayFunction:\n    def time_mock_broadcast_to_numpy(self):\n        mock_broadcast_to(self.numpy_array, ())\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_broadcast_to_numpy", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a77448f26c942ff1b0caa4cfa8e496e7f3b84342a4b3b798fadfde02460e4a7a", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_duck": {"code": "class ArrayFunction:\n    def time_mock_concatenate_duck(self):\n        mock_concatenate(self.duck_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_duck", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca0f8a5a984c328b123d685cd3abebcfe69e74236884e9ae936604992f36247a", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_many": {"code": "class ArrayFunction:\n    def time_mock_concatenate_many(self):\n        mock_concatenate(self.many_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_many", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d63644407e7bb0c62ecd497191be5179221a5471d2679821ab9cd51e58e33b81", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_mixed": {"code": "class ArrayFunction:\n    def time_mock_concatenate_mixed(self):\n        mock_concatenate(self.mixed_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_mixed", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f0f836ffe9cd3cd7558defd3fcf150b87fed04847e82126cb3d0be71cf1db5d0", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_numpy": {"code": "class ArrayFunction:\n    def time_mock_concatenate_numpy(self):\n        mock_concatenate(self.numpy_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_numpy", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ba531ff260ae0e34362db5e75dc2787f752347a622d2ac57279a05124ea3c43a", "warmup_time": -1}, "bench_random.Permutation.time_permutation_1d": {"code": "class Permutation:\n    def time_permutation_1d(self):\n        np.random.permutation(self.a_1d)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random_sample(self.n)\n        self.a_2d = np.random.random_sample((self.n, 2))", "min_run_count": 2, "name": "bench_random.Permutation.time_permutation_1d", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c98b2b142749df1caad9e105a969d6d62e034bfb663829b5da54bf9a6be19155", "warmup_time": -1}, "bench_random.Permutation.time_permutation_2d": {"code": "class Permutation:\n    def time_permutation_2d(self):\n        np.random.permutation(self.a_2d)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random_sample(self.n)\n        self.a_2d = np.random.random_sample((self.n, 2))", "min_run_count": 2, "name": "bench_random.Permutation.time_permutation_2d", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2534ca6537208a3369271cd59dcda4de70211fd8bce524292e65ac272a23cd46", "warmup_time": -1}, "bench_random.Permutation.time_permutation_int": {"code": "class Permutation:\n    def time_permutation_int(self):\n        np.random.permutation(self.n)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random_sample(self.n)\n        self.a_2d = np.random.random_sample((self.n, 2))", "min_run_count": 2, "name": "bench_random.Permutation.time_permutation_int", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "788bae93c5c08bcba95c948d067e1fee69b05b1ac0198c896e2cf4c9907955a5", "warmup_time": -1}, "bench_random.Randint.time_randint_fast": {"code": "class Randint:\n    def time_randint_fast(self):\n        \"\"\"Compare to uint32 below\"\"\"\n        np.random.randint(0, 2**30, size=10**5)", "min_run_count": 2, "name": "bench_random.Randint.time_randint_fast", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bb8c6b342d125e6ce85eba74f81e9a3f69eb3a1f4948921a73b680d3ea4f312e", "warmup_time": -1}, "bench_random.Randint.time_randint_slow": {"code": "class Randint:\n    def time_randint_slow(self):\n        \"\"\"Compare to uint32 below\"\"\"\n        np.random.randint(0, 2**30 + 1, size=10**5)", "min_run_count": 2, "name": "bench_random.Randint.time_randint_slow", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "97dcc24881c776455f5c6a04bec764909ac9a0e4f7cfde6413f8d60a487adbc5", "warmup_time": -1}, "bench_random.Randint_dtype.time_randint_fast": {"code": "class Randint_dtype:\n    def time_randint_fast(self, name):\n        high = self.high[name]\n        np.random.randint(0, high, size=10**5, dtype=name)\n\n    def setup(self, name):\n        from numpy.lib import NumpyVersion\n        if NumpyVersion(np.__version__) < '1.11.0.dev0':\n            raise NotImplementedError", "min_run_count": 2, "name": "bench_random.Randint_dtype.time_randint_fast", "number": 0, "param_names": ["dtype"], "params": [["'bool'", "'uint8'", "'uint16'", "'uint32'", "'uint64'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "686cd267595db36e1a5b21a65b9f0a77efb9cd65c4b1b7f631b7ffe955087d2b", "warmup_time": -1}, "bench_random.Randint_dtype.time_randint_slow": {"code": "class Randint_dtype:\n    def time_randint_slow(self, name):\n        high = self.high[name]\n        np.random.randint(0, high + 1, size=10**5, dtype=name)\n\n    def setup(self, name):\n        from numpy.lib import NumpyVersion\n        if NumpyVersion(np.__version__) < '1.11.0.dev0':\n            raise NotImplementedError", "min_run_count": 2, "name": "bench_random.Randint_dtype.time_randint_slow", "number": 0, "param_names": ["dtype"], "params": [["'bool'", "'uint8'", "'uint16'", "'uint32'", "'uint64'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5288dc43a24dc0ad0085d813bc9c7f1501cff277adbffe869256718c92d76bbd", "warmup_time": -1}, "bench_random.Random.time_rng": {"code": "class Random:\n    def time_rng(self, name):\n        self.func(*self.params)\n\n    def setup(self, name):\n        items = name.split()\n        name = items.pop(0)\n        params = [float(x) for x in items]\n    \n        self.func = getattr(np.random, name)\n        self.params = tuple(params) + ((100, 100),)", "min_run_count": 2, "name": "bench_random.Random.time_rng", "number": 0, "param_names": ["param1"], "params": [["'normal'", "'uniform'", "'weibull 1'", "'binomial 10 0.5'", "'poisson 10'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "20d7c6d641e664676dba02e39f4358735344639b5c0798301d8702c6d4b0cb1f", "warmup_time": -1}, "bench_random.Shuffle.time_100000": {"code": "class Shuffle:\n    def time_100000(self):\n        np.random.shuffle(self.a)\n\n    def setup(self):\n        self.a = np.arange(100000)", "min_run_count": 2, "name": "bench_random.Shuffle.time_100000", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "008b63ed906c93eff862ba9a6aad85a0ed290deb009fa1085447a66b23e8d717", "warmup_time": -1}, "bench_reduce.AddReduce.time_axis_0": {"code": "class AddReduce:\n    def time_axis_0(self):\n        [np.add.reduce(a, axis=0) for a in self.squares]\n\n    def setup(self):\n        self.squares = get_squares().values()", "min_run_count": 2, "name": "bench_reduce.AddReduce.time_axis_0", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2af9934f0fbbc8408edad22dfb037bd0861b919664055e5fe609f4058bffd1d9", "warmup_time": -1}, "bench_reduce.AddReduce.time_axis_1": {"code": "class AddReduce:\n    def time_axis_1(self):\n        [np.add.reduce(a, axis=1) for a in self.squares]\n\n    def setup(self):\n        self.squares = get_squares().values()", "min_run_count": 2, "name": "bench_reduce.AddReduce.time_axis_1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9e926386f8f433cfbcbea78e95c4f2cb3755951748b965430ab5e407be5d4b66", "warmup_time": -1}, "bench_reduce.AddReduceSeparate.time_reduce": {"code": "class AddReduceSeparate:\n    def time_reduce(self, axis, typename):\n        np.add.reduce(self.a, axis=axis)\n\n    def setup(self, axis, typename):\n        self.a = get_squares()[typename]", "min_run_count": 2, "name": "bench_reduce.AddReduceSeparate.time_reduce", "number": 0, "param_names": ["axis", "type"], "params": [["0", "1"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9fe950161a3a7c6883be4205a98ad6f3b268adcb3448bb900588c9a05f1b4d41", "warmup_time": -1}, "bench_reduce.AnyAll.time_all_fast": {"code": "class AnyAll:\n    def time_all_fast(self):\n        self.zeros.all()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 0, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_all_fast", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4cd25b0c372a501c9f1a21fe06351b3b7dc042df730f950f5b7e8ae35391751e", "warmup_time": -1}, "bench_reduce.AnyAll.time_all_slow": {"code": "class AnyAll:\n    def time_all_slow(self):\n        self.ones.all()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 0, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_all_slow", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "887513d961383f51b6ce15a5c3872ef8ada189ef0be33ed8f62c5ac1786e1fd8", "warmup_time": -1}, "bench_reduce.AnyAll.time_any_fast": {"code": "class AnyAll:\n    def time_any_fast(self):\n        self.ones.any()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 0, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_any_fast", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a22ca1e69b7ad6b5d989b008c449d9b339b8b5e210a42d00b1cf8c7bfd867a7d", "warmup_time": -1}, "bench_reduce.AnyAll.time_any_slow": {"code": "class AnyAll:\n    def time_any_slow(self):\n        self.zeros.any()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 0, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_any_slow", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "48f7671f06745db54a390c87f33f645b6e1719687da9d5e59a0cf917c99ef7cc", "warmup_time": -1}, "bench_reduce.MinMax.time_max": {"code": "class MinMax:\n    def time_max(self, dtype):\n        np.max(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.MinMax.time_max", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>", "<class 'numpy.int64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "514f3cab642bc43d526e91045a6374f6aca5840683583600a5d8cbe85fb787dc", "warmup_time": -1}, "bench_reduce.MinMax.time_min": {"code": "class MinMax:\n    def time_min(self, dtype):\n        np.min(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.MinMax.time_min", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>", "<class 'numpy.int64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e6b22576b375226197a12de92f4a1cc57b3559e74d1fffbf7c304ae08ead1283", "warmup_time": -1}, "bench_reduce.SmallReduction.time_small": {"code": "class SmallReduction:\n    def time_small(self):\n        np.sum(self.d)\n\n    def setup(self):\n        self.d = np.ones(100, dtype=np.float32)", "min_run_count": 2, "name": "bench_reduce.SmallReduction.time_small", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c036bc421f0fb669164ceb2814d8765d6f3a6c7c38f5e2e55a3fc00945c9468", "warmup_time": -1}, "bench_shape_base.Block.time_3d": {"code": "class Block3D:\n    def time_3d(self, n, mode):\n        if mode == 'block':\n            np.block(self.block)\n        else:  # mode == 'copy'\n            [arr.copy() for arr in self.arr_list]\n\n    def setup(self, n, mode):\n        # Slow setup method: hence separated from the others above\n        self.a000 = np.ones((2 * n, 2 * n, 2 * n), int) * 1\n    \n        self.a100 = np.ones((3 * n, 2 * n, 2 * n), int) * 2\n        self.a010 = np.ones((2 * n, 3 * n, 2 * n), int) * 3\n        self.a001 = np.ones((2 * n, 2 * n, 3 * n), int) * 4\n    \n        self.a011 = np.ones((2 * n, 3 * n, 3 * n), int) * 5\n        self.a101 = np.ones((3 * n, 2 * n, 3 * n), int) * 6\n        self.a110 = np.ones((3 * n, 3 * n, 2 * n), int) * 7\n    \n        self.a111 = np.ones((3 * n, 3 * n, 3 * n), int) * 8\n    \n        self.block = [\n            [\n                [self.a000, self.a001],\n                [self.a010, self.a011],\n            ],\n            [\n                [self.a100, self.a101],\n                [self.a110, self.a111],\n            ]\n        ]\n        self.arr_list = [a\n                         for two_d in self.block\n                         for one_d in two_d\n                         for a in one_d]", "min_run_count": 2, "name": "bench_shape_base.Block.time_3d", "number": 0, "param_names": ["n", "mode"], "params": [["1", "10", "100"], ["'block'", "'copy'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b9a48960b73fb3f85bfc2dc0e571c65492e2e23f6ba46efdbaa83c229a840ed3", "warmup_time": -1}, "bench_shape_base.Block.time_block_complicated": {"code": "class Block:\n    def time_block_complicated(self, n):\n        np.block([[self.one_2d, self.two_2d],\n                  [self.three_2d],\n                  [self.four_1d],\n                  [self.five_0d, self.six_1d],\n                  [self.zero_2d]])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_block_complicated", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f5020e81ec4b44cc8c43385d45447eb00773324ed075f3e140a83e6deea1b5b1", "warmup_time": -1}, "bench_shape_base.Block.time_block_simple_column_wise": {"code": "class Block:\n    def time_block_simple_column_wise(self, n):\n        np.block([[self.a_2d], [self.b_2d]])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_block_simple_column_wise", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ace4adce497cb59167431a3cb0e9336e9a4ca74c5a028728f072cb377034afac", "warmup_time": -1}, "bench_shape_base.Block.time_block_simple_row_wise": {"code": "class Block:\n    def time_block_simple_row_wise(self, n):\n        np.block([self.a_2d, self.b_2d])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_block_simple_row_wise", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7e68cd3ac85d87ea0960b4e3480f3447d612752cc5da0d8e622d44883521fb9a", "warmup_time": -1}, "bench_shape_base.Block.time_nested": {"code": "class Block:\n    def time_nested(self, n):\n        np.block([\n            [\n                np.block([\n                   [self.one],\n                   [self.three],\n                   [self.four]\n                ]),\n                self.two\n            ],\n            [self.five, self.six],\n            [self.zero]\n        ])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_nested", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "76a91fd4afc8a0e86b6afd79d5f3ea4ecd9fbbef884ae0500b470509e9e8b67e", "warmup_time": -1}, "bench_shape_base.Block.time_no_lists": {"code": "class Block:\n    def time_no_lists(self, n):\n        np.block(1)\n        np.block(np.eye(3 * n))\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_no_lists", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6bc26f65802cda859473d4bbdd7c111e5084ace7bd39cca0c9ca3aad06eee9ea", "warmup_time": -1}, "bench_shape_base.Block2D.time_block2d": {"code": "class Block2D:\n    def time_block2d(self, shape, dtype, n_chunks):\n        np.block(self.block_list)\n\n    def setup(self, shape, dtype, n_chunks):\n    \n        self.block_list = [\n             [np.full(shape=[s//n_chunk for s, n_chunk in zip(shape, n_chunks)],\n                     fill_value=1, dtype=dtype) for _ in range(n_chunks[1])]\n            for _ in range(n_chunks[0])\n        ]", "min_run_count": 2, "name": "bench_shape_base.Block2D.time_block2d", "number": 0, "param_names": ["shape", "dtype", "n_chunks"], "params": [["(16, 16)", "(32, 32)", "(64, 64)", "(128, 128)", "(256, 256)", "(512, 512)", "(1024, 1024)"], ["'uint8'", "'uint16'", "'uint32'", "'uint64'"], ["(2, 2)", "(4, 4)"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "93de8827eb35255e1f0daea4c5054d670f73b0c62c2cb54fc42a81e29c851ea8", "warmup_time": -1}, "bench_ufunc.ArgParsing.time_add_arg_parsing": {"code": "class ArgParsing:\n    def time_add_arg_parsing(self, arg_pack):\n        np.add(*arg_pack.args, **arg_pack.kwargs)", "min_run_count": 2, "name": "bench_ufunc.ArgParsing.time_add_arg_parsing", "number": 0, "param_names": ["arg_kwarg"], "params": [["(array(1.), array(2.))", "(array(1.), array(2.), array(3.))", "(array(1.), array(2.), out=array(3.))", "(array(1.), array(2.), out=(array(3.),))", "(array(1.), array(2.), out=array(3.), subok=True, where=True)", "(array(1.), array(2.), subok=True)", "(array(1.), array(2.), subok=True, where=True)", "(array(1.), array(2.), array(3.), subok=True, where=True)"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7f8c98d0d3e4d48d2e4c78bc17a51a7d437b9b658ebf673e6829d145b6f109ce", "warmup_time": -1}, "bench_ufunc.ArgParsingReduce.time_add_reduce_arg_parsing": {"code": "class ArgParsingReduce:\n    def time_add_reduce_arg_parsing(self, arg_pack):\n        np.add.reduce(*arg_pack.args, **arg_pack.kwargs)", "min_run_count": 2, "name": "bench_ufunc.ArgParsingReduce.time_add_reduce_arg_parsing", "number": 0, "param_names": ["arg_kwarg"], "params": [["(array([0., 1.]))", "(array([0., 1.]), 0)", "(array([0., 1.]), axis=0)", "(array([0., 1.]), 0, None)", "(array([0., 1.]), axis=0, dtype=None)", "(array([0., 1.]), 0, None, array(0.))", "(array([0., 1.]), axis=0, dtype=None, out=array(0.))", "(array([0., 1.]), out=array(0.))"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ad65096c8033c570321d0bbb8effaa15bce7a6faab47e96c8848d61173fc5b40", "warmup_time": -1}, "bench_ufunc.Broadcast.time_broadcast": {"code": "class Broadcast:\n    def time_broadcast(self):\n        self.d - self.e\n\n    def setup(self):\n        self.d = np.ones((50000, 100), dtype=np.float64)\n        self.e = np.ones((100,), dtype=np.float64)", "min_run_count": 2, "name": "bench_ufunc.Broadcast.time_broadcast", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "131ce9ba025e2d78a4dfdbaf95871da67ac00aac41956c1ad64741a2102ec6c5", "warmup_time": -1}, "bench_ufunc.Custom.time_and_bool": {"code": "class Custom:\n    def time_and_bool(self):\n        (self.b & self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_and_bool", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a86867e3b34ed9b571d5ef3232fb916555165cd1f489297b101f04a727403281", "warmup_time": -1}, "bench_ufunc.Custom.time_nonzero": {"code": "class Custom:\n    def time_nonzero(self):\n        np.nonzero(self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_nonzero", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a2bfcc4d1a399fb5b9457fa59e9d2c10beefaeb8109557be1756181651549625", "warmup_time": -1}, "bench_ufunc.Custom.time_not_bool": {"code": "class Custom:\n    def time_not_bool(self):\n        (~self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_not_bool", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fabc3a193c9287d44cf4cff6d9352e67d1261c1a605327d0d5f5d29af1cc3b5c", "warmup_time": -1}, "bench_ufunc.Custom.time_or_bool": {"code": "class Custom:\n    def time_or_bool(self):\n        (self.b | self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_or_bool", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d8cc3603bfff2d105d4e8d30e48ffa58120a715cf2920d7831270952b719b429", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_char_or": {"code": "class CustomInplace:\n    def time_char_or(self):\n        np.bitwise_or(self.c, 0, out=self.c)\n        np.bitwise_or(0, self.c, out=self.c)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_char_or", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e17e62b7756bffe100ff86408f24dcfb06a25b928f488c08f96ef0db5607f861", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_char_or_temp": {"code": "class CustomInplace:\n    def time_char_or_temp(self):\n        0 | self.c | 0\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_char_or_temp", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1be81c7b7584c25261a4190fbfcf024b7b724516f69cad112327ad0d40e5476e", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_double_add": {"code": "class CustomInplace:\n    def time_double_add(self):\n        np.add(self.d, 1., out=self.d)\n        np.add(1., self.d, out=self.d)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_double_add", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f19662f4a311fc929de94204a4b67241b1bb5ccf947f71bac733c613ee769865", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_double_add_temp": {"code": "class CustomInplace:\n    def time_double_add_temp(self):\n        1. + self.d + 1.\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_double_add_temp", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e74700f4180455a4703910e2f5c4fda2ebd6ee1401a18d1a1ca8f093f3710e3", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_float_add": {"code": "class CustomInplace:\n    def time_float_add(self):\n        np.add(self.f, 1., out=self.f)\n        np.add(1., self.f, out=self.f)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_float_add", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b11f548bdfbecba94fc50571119e32ffe7d6d2bbab330966d2acd80a91550b51", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_float_add_temp": {"code": "class CustomInplace:\n    def time_float_add_temp(self):\n        1. + self.f + 1.\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_float_add_temp", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "715b0deebbb271f4d643d0575a3b913ed3729b2562da829c102f64b902f3de4d", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_int_or": {"code": "class CustomInplace:\n    def time_int_or(self):\n        np.bitwise_or(self.i, 0, out=self.i)\n        np.bitwise_or(0, self.i, out=self.i)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_int_or", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e6eb0dc45e0d0d9a3dddce986d8940c73e4771e5e80bebc25eef75022122950", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_int_or_temp": {"code": "class CustomInplace:\n    def time_int_or_temp(self):\n        0 | self.i | 0\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_int_or_temp", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8892315dfcc7e6bf5be252fc352286cca4e2b317312e17686096539d1ca30496", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_add_scalar2": {"code": "class CustomScalar:\n    def time_add_scalar2(self, dtype):\n        np.add(self.d, 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_add_scalar2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c5ed02e001dd9bafa33d7f7b38ceb98abf8cdf8467193e7c0f53f94cf1bbc81", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_divide_scalar2": {"code": "class CustomScalar:\n    def time_divide_scalar2(self, dtype):\n        np.divide(self.d, 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_divide_scalar2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c32304caa2530a08b1034bd1ca4e575a5b9349681d9dde77b5994b93d5898994", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_divide_scalar2_inplace": {"code": "class CustomScalar:\n    def time_divide_scalar2_inplace(self, dtype):\n        np.divide(self.d, 1, out=self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_divide_scalar2_inplace", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "64e072c5d7cf47aa563db42bf4dea71a999c35f748b3f79a086af9c7cb266c92", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_less_than_scalar2": {"code": "class CustomScalar:\n    def time_less_than_scalar2(self, dtype):\n        (self.d < 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_less_than_scalar2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "43e21cdb587cd06cf289354bcb31a9856168b6822ed5b5e599736c5c280aa660", "warmup_time": -1}, "bench_ufunc.Scalar.time_add_scalar": {"code": "class Scalar:\n    def time_add_scalar(self):\n        (self.x + self.x)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)", "min_run_count": 2, "name": "bench_ufunc.Scalar.time_add_scalar", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eb95fd29e2ab6b42cbf524521b2f2318da4375c69e9eb9bd9367c5e2b2a30ea3", "warmup_time": -1}, "bench_ufunc.Scalar.time_add_scalar_conv": {"code": "class Scalar:\n    def time_add_scalar_conv(self):\n        (self.x + 1.0)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)", "min_run_count": 2, "name": "bench_ufunc.Scalar.time_add_scalar_conv", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bbf133739c730b558f163bfa0a41965f82312794363f18948bd93de0cdefc11a", "warmup_time": -1}, "bench_ufunc.Scalar.time_add_scalar_conv_complex": {"code": "class Scalar:\n    def time_add_scalar_conv_complex(self):\n        (self.y + self.z)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)", "min_run_count": 2, "name": "bench_ufunc.Scalar.time_add_scalar_conv_complex", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca23715a82f5300e9537e32b5a25944d9c56e195013449e49701a86f2600b87e", "warmup_time": -1}, "bench_ufunc.UFunc.time_ufunc_types": {"code": "class UFunc:\n    def time_ufunc_types(self, ufuncname):\n        [self.f(*arg) for arg in self.args]\n\n    def setup(self, ufuncname):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        self.args = []\n        for t, a in get_squares_().items():\n            arg = (a,) * self.f.nin\n            try:\n                self.f(*arg)\n            except TypeError:\n                continue\n            self.args.append(arg)", "min_run_count": 2, "name": "bench_ufunc.UFunc.time_ufunc_types", "number": 0, "param_names": ["ufunc"], "params": [["'abs'", "'absolute'", "'add'", "'arccos'", "'arccosh'", "'arcsin'", "'arcsinh'", "'arctan'", "'arctan2'", "'arctanh'", "'bitwise_and'", "'bitwise_not'", "'bitwise_or'", "'bitwise_xor'", "'cbrt'", "'ceil'", "'conj'", "'conjugate'", "'copysign'", "'cos'", "'cosh'", "'deg2rad'", "'degrees'", "'divide'", "'divmod'", "'equal'", "'exp'", "'exp2'", "'expm1'", "'fabs'", "'float_power'", "'floor'", "'floor_divide'", "'fmax'", "'fmin'", "'fmod'", "'frexp'", "'gcd'", "'greater'", "'greater_equal'", "'heaviside'", "'hypot'", "'invert'", "'isfinite'", "'isinf'", "'isnan'", "'isnat'", "'lcm'", "'ldexp'", "'left_shift'", "'less'", "'less_equal'", "'log'", "'log10'", "'log1p'", "'log2'", "'logaddexp'", "'logaddexp2'", "'logical_and'", "'logical_not'", "'logical_or'", "'logical_xor'", "'maximum'", "'minimum'", "'mod'", "'modf'", "'multiply'", "'negative'", "'nextafter'", "'not_equal'", "'positive'", "'power'", "'rad2deg'", "'radians'", "'reciprocal'", "'remainder'", "'right_shift'", "'rint'", "'sign'", "'signbit'", "'sin'", "'sinh'", "'spacing'", "'sqrt'", "'square'", "'subtract'", "'tan'", "'tanh'", "'true_divide'", "'trunc'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "5e9a778c538969f78e1a50b387862004b9261c57231bd40e2b48ff4b647e46d8", "warmup_time": -1}}, "machines": {"asv-benchmark-numpy": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU @ 2.00GHz", "machine": "asv-benchmark-numpy", "os": "Linux 4.15.0-1025-gcp", "ram": "371481332", "version": 1}}, "tags": {"enable_separate_by_default": 10683, "pre-removal-numpybook": 13148, "v0.2.0": 42, "v0.2.2": 740, "v0.3.0": 760, "v0.3.2": 871, "v0.4.2b1": 1215, "v0.6.0": 1435, "v0.6.1": 1441, "v0.8.4": 1591, "v0.9.2": 1767, "v0.9.4": 1916, "v0.9.5": 2054, "v0.9.6": 2167, "v0.9.8": 2472, "v1.0": 3290, "v1.0.1": 3366, "v1.0.2": 3543, "v1.0.3": 3724, "v1.0.3.1": 3846, "v1.0.4": 3983, "v1.0b1": 2788, "v1.0b2": 2916, "v1.0b3": 2949, "v1.0b4": 2986, "v1.0b5": 3015, "v1.0rc1": 3096, "v1.0rc2": 3192, "v1.0rc3": 3259, "v1.1.0": 4635, "v1.1.0rc1": 4589, "v1.1.1": 4948, "v1.1.1rc1": 4881, "v1.1.1rc2": 4904, "v1.10.0": 15429, "v1.10.0.post2": 15442, "v1.10.0b1": 15167, "v1.10.0rc2": 15380, "v1.10.1": 15495, "v1.10.2": 15898, "v1.10.2rc1": 15747, "v1.10.2rc2": 15860, "v1.10.3": 16072, "v1.10.4": 16076, "v1.11.0": 16687, "v1.11.0b1": 16292, "v1.11.0b2": 16308, "v1.11.0b3": 16415, "v1.11.0rc1": 16528, "v1.11.0rc2": 16649, "v1.11.1": 16984, "v1.11.1rc1": 16880, "v1.11.2": 17275, "v1.11.2rc1": 17222, "v1.11.3": 17557, "v1.12.0": 17655, "v1.12.0b1": 17440, "v1.12.0rc1": 17581, "v1.12.0rc2": 17614, "v1.12.1": 17996, "v1.12.1rc1": 17960, "v1.13.0": 18526, "v1.13.0rc1": 18413, "v1.13.0rc2": 18465, "v1.13.1": 18677, "v1.13.2": 19120, "v1.13.3": 19139, "v1.14.0": 19763, "v1.14.0rc1": 19601, "v1.14.1": 20039, "v1.14.2": 20123, "v1.14.3": 20432, "v1.14.4": 20707, "v1.14.5": 20774, "v1.14.6": 21560, "v1.15.0": 21084, "v1.15.0rc1": 20873, "v1.15.0rc2": 21022, "v1.15.1": 21297, "v1.15.2": 21551, "v1.15.3": 21844, "v1.15.4": 21942, "v1.2.0": 5203, "v1.2.0b1": 4998, "v1.2.0b2": 5005, "v1.2.0rc1": 5090, "v1.2.0rc2": 5144, "v1.2.1": 5277, "v1.3.0": 6111, "v1.3.0b1": 5964, "v1.3.0rc1": 6082, "v1.3.0rc2": 6105, "v1.4.0": 7290, "v1.4.0rc1": 7077, "v1.4.0rc2": 7287, "v1.4.1": 7607, "v1.4.1rc1": 7596, "v1.4.1rc2": 7601, "v1.4.1rc3": 7605, "v1.5.0": 7924, "v1.5.0b1": 7838, "v1.5.0b2": 7900, "v1.5.0rc1": 7919, "v1.5.1": 8094, "v1.5.1rc1": 8049, "v1.5.1rc2": 8077, "v1.6.0": 8765, "v1.6.0b1": 8515, "v1.6.0b2": 8649, "v1.6.0rc1": 8733, "v1.6.0rc2": 8748, "v1.6.0rc3": 8759, "v1.6.1": 9071, "v1.6.1rc1": 8847, "v1.6.1rc2": 8956, "v1.6.1rc3": 9026, "v1.6.2": 9876, "v1.6.2rc1": 9830, "v1.7.0": 10714, "v1.7.0b1": 10100, "v1.7.0b2": 10201, "v1.7.0rc1": 10586, "v1.7.0rc2": 10713, "v1.7.1": 10952, "v1.7.1rc1": 10894, "v1.7.2": 12590, "v1.7.2rc1": 12438, "v1.8.0": 12411, "v1.8.0b1": 11907, "v1.8.0b2": 11963, "v1.8.0rc1": 12166, "v1.8.0rc2": 12280, "v1.8.1": 13266, "v1.8.1rc1": 13048, "v1.8.2": 13799, "v1.8.2rc1": 13794, "v1.9.0": 13918, "v1.9.0b1": 13574, "v1.9.0b2": 13746, "v1.9.0rc1": 13857, "v1.9.1": 14153, "v1.9.1rc1": 14134, "v1.9.2": 14555, "v1.9.2rc1": 14443, "v1.9.3": 15308, "with_maskna": 9952}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}